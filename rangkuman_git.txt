Command :
git init
git config --global user.name "namamu"
git config --global user.email "emailmu"
git config --local user.name "namamu"
git config --local user.email "emailmu"
git config user.name "namamu"
git config user.email "emailmu"
git config --list               : cek perubahan/update list config
cat .git/config                 : konfirmasi ketika email dan/atau nama dirubah
git status
git status -s			: mengelist file yang ada di staging area
git diff			: untuk melihat perubahan pada file sebelum di staging are
git diff --staged		: untuk melihat perubahan file pada staging area
git add "nama_file"             : (nambah file ke antrian commit satu-satu)   
git add .                       : (nambah file semua ke antrian commit)
git commit -m "pesannya :D"
git checkout <5_kode_hash_pertama> -- <nama_file>     	: mengambil file dari history lain
git checkout <nama_branch_recent> -- <nama_file>	: mengembalikan file ke current branch
git checkout -- <nama_file>	: membatalkan perubahan commit file terbaru
git checkout <hash_lengkap>	: menuju ke semua file di history hash tertulis
git update                      : mengupdate git ke versi terbaru
git rm <nama_file>		: menghapus file supaya tidak ditracking lagi sama git
git rm \*.<ekstensi>		: hapus ekstensi khusus
git mv file_from file_to	: rename file
(sebenarnya command rm dan mv di git sama kayak command di file biasa)

case:
jika cman ngetik git commit, maka masuk vim, cara exit :
:q!

--	                              : dibuat untuk hal spesifik
git checkout (5_nomor_hash_awal) -- (nama_file)    : mengembalikan file yang dihapus
git commit -a -m "pesan_mu"
git commit -am "pesan_mu"
git commit --amend		: menambahkan file yang tertinggal
git commit --amend --no-edit 
git push --force

git branch <nama_branch>        : membuat branch baru
git branch -m <old> <new>	: merename nama branch
--
git checkout -b <nama_branch>   : membuat dan berpindah ke branch yang diinginkan 
git branch                      : mengecek branch
git log --stat 			: melihat history dengan rincian lebih lengkap
git log --all --decorate --oneline --graph  : menampilkan graph history
git log --oneline -graph	: simplify ^^

case (membuat alias/shortcut):
misal meringkas git log --all --decorate --oneline --graph,
alias graph="git log --all --decorate --oneline --graph"
git checkout <nama_branch>          : pindah branch
git merge <branch_sasaran>          : merge suatu branch di branch saat ini
git branch --merge                  : mengecek nama branch yang sudah di merge
git branch -d <branch_yg_akan_dihapus>   : menghapus branch setelah merge
git branch -D <branch_yg_akan_dihapus>   : menghapus branch tanpa mempedulikan merge
... (MULTIPLE REMOTE)
git merge <nama_remote>/branch      : merge hasil dari fetch

case:
merge three-way kemudian muncul vim, ketik ini supaya exit dengan menyimpan nilai default :
:wq!

git merge staff                     :cek strategi merge


# GIT REMOTE
git remote add <nama_remote_yang_diinginkan> <alamat_repo.git>	: jika belum remote di gitnya
git remote remove <nama_remote>			: menghapus remote
git remote                  			: mengecek nama remote (default origin)
git remote -v               			: mengecek alamat dari git
git remote show <nama_remote>			: menampilkan informasi remote dengan lengkap
git remote rename <nama_lama> <nama_baru>	: merename nama remote
git push                    	: memasukkan data dari local ke internet setelah diinisiasi pushnya


# GIT REMOTE FROM ZERO
buat repo baru di github yang bener-bener kosongan, lalu tambahkan
git remote add <nama_remote_yang_diinginkan> <alamat_repo.git>
git branch -M main              : kayaknya cman merubah nama branch ini
git push -u <nama_remote> <nama_branch>        : mengepush ke main dari origin (karena pertama kali)
note:: -u adalah upstream yang artinya push ke remote origin dan branch main supaya nanti cuman ketik 'git push' aja buat ngepush 
git branch -d <nama_branch>     : menghapus branch

case:
ketika dua orang remote di file yang sama
1. git fetch                : mengecek repo di github udah sampai mana
                            : ketika terjadi konflik saat push karena double upload dari user lain
                            : buat membuat cabang baru yang nantinya di merge buat resolve merge conflict
2. git pull                 : mengambil dan merge file
...(MULTIPLE REMOTE)
git fetch <nama_remote>     : buat sinkron commit file lokal dari file github
git fetch pb		        : jika punya banyak remote dan mau update semuanya sekaligus
// fork
git remote set-url origin <link_github_sumber_fork>
git push <nama_remote> <branch_remote>:<nama_calon_branch_baru_di_fork_ws>

# GITHUB PAGES
(github bisa digunakan webhosting ketika cuman HTML, CSS, dan javascript)
 
# MULTIPLE REMOTE
(mengupdate lokal dengan sumber dan lokal dengan github)
fork                        : duplikat repo orang lain
tambah double remote supaya update di dua repo (repo copyan dan repo asli)

# REMOTE BRANCH
(pull request)              : permintaan agar perubahan ditarik repo master
note:
buat branch sebelum pull req, biarkan master sama dengan github sumber

git push <nama_remote> --delete <nama_branch>   : mengupdate nama_branch yang dihapus dari lokal ke github

# GIT IGNORE
(mengignore file supaya tidak ikut ter-add)
buat file berjudul .gitignore, lalu di dalamnya ditambah file yang diignore
contoh:
config.txt
data/       (file)
*.exe        (ekstensi .exe)

sumber referensi suggest file ignore : gitignore.io

# GIT REBASE
(mengetrack dan menyimpelkan commit ke bagian commit terakhir di branch master (dari branch non-master))

* Cara clone
git remote add origin https://github.com/ramamimu/Data_structure.wiki.git
git branch -M main
git push -u origin main
git rebase <nama_branch>

git rm --cached learn		:remove file in next commit
git rm -r --cached learn	:remove folder in next commit